name: CTF Deployer CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install lint dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run flake8
        run: |
          flake8 flask_app/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check formatting with black
        run: |
          black --check flask_app/

      - name: Check imports with isort
        run: |
          isort --check flask_app/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      # PostgreSQL service container for database tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secure_password
          POSTGRES_DB: ctf_deployer
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary python-dotenv pytest pytest-cov netifaces requests
          pip install -r flask_app/requirements.txt
      
      - name: Configure environment for CI
        run: |
          # Just modify DB_HOST to use localhost instead of postgres
          sed -i 's/DB_HOST=postgres/DB_HOST=localhost/g' .env
          echo "Environment configured for CI - using localhost for database"

      - name: Verify database connection
        run: |
          python -c "
          import psycopg2
          try:
              conn = psycopg2.connect(
                  dbname='ctf_deployer',
                  user='postgres', 
                  password='secure_password',
                  host='localhost',
                  port=5432
              )
              print('Database connection successful!')
              conn.close()
          except Exception as e:
              print(f'Database connection failed: {e}')
              exit(1)
          "
      
      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v --cov=flask_app
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: .coverage
          retention-days: 5

  environment-tests:
    name: Environment Validation Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary python-dotenv pytest pytest-cov netifaces requests
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Configure environment
        run: |
          # Modify specific values for CI testing
          sed -i 's/FLASK_APP_PORT=.*/FLASK_APP_PORT=7000/g' .env
          sed -i 's/DIRECT_TEST_PORT=.*/DIRECT_TEST_PORT=7001/g' .env
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/g' .env
      
      - name: Setup test environment
        run: |
          # Create necessary directories and __init__.py files
          mkdir -p tests/environment tests/unit tests/api
          touch tests/__init__.py tests/environment/__init__.py tests/unit/__init__.py tests/api/__init__.py
          
          # Move tests to appropriate directories if needed
          for test_file in tests/test_*.py; do
            if [ -f "$test_file" ]; then
              if [[ "$test_file" == *"test_database_minimal.py" ]]; then
                mv "$test_file" tests/unit/
              else
                mv "$test_file" tests/environment/
              fi
            fi
          done
      
      - name: Run environment tests
        run: |
          python tests/run_tests.py -v

  build-test:
    name: Build and Smoke Test
    runs-on: ubuntu-latest
    needs: [unit-tests, environment-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Configure environment
        run: |
          # Set specific values for CI testing
          sed -i 's/FLASK_APP_PORT=.*/FLASK_APP_PORT=7000/g' .env
          sed -i 's/DIRECT_TEST_PORT=.*/DIRECT_TEST_PORT=7001/g' .env
          sed -i 's/START_RANGE=.*/START_RANGE=7100/g' .env
          sed -i 's/STOP_RANGE=.*/STOP_RANGE=7200/g' .env

      - name: Build the Docker images
        run: |
          docker-compose build
      
      - name: Test image existence
        run: |
          docker-compose config
          docker images | grep generic_ctf_task

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install security scanner
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r flask_app/ -x tests/,flask_app/templates/
      
      - name: Check dependencies for vulnerabilities
        run: |
          safety check -r flask_app/requirements.txt

  full-integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secure_password
          POSTGRES_DB: ctf_deployer
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Configure environment
        run: |
          # Modify for CI testing
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/g' .env
          sed -i 's/FLASK_APP_PORT=.*/FLASK_APP_PORT=7000/g' .env
          sed -i 's/DIRECT_TEST_PORT=.*/DIRECT_TEST_PORT=7001/g' .env
          sed -i 's/START_RANGE=.*/START_RANGE=7100/g' .env
          sed -i 's/STOP_RANGE=.*/STOP_RANGE=7200/g' .env
          sed -i 's/ADMIN_KEY=.*/ADMIN_KEY=secure_test_key_for_ci_only/g' .env
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask_app/requirements.txt
          pip install psycopg2-binary python-dotenv pytest pytest-cov netifaces requests
      
      - name: Setup test environment
        run: |
          # Create necessary directories and __init__.py files
          mkdir -p tests/environment tests/unit tests/api
          touch tests/__init__.py tests/environment/__init__.py tests/unit/__init__.py tests/api/__init__.py
          
          # Move API test to appropriate directory if needed
          if [ -f "tests/api_test.sh" ]; then
            mv tests/api_test.sh tests/api/
            chmod +x tests/api/api_test.sh
          fi
      
      - name: Build and start services
        run: |
          docker-compose build
          docker-compose up -d
          echo "Waiting for services to start..."
          sleep 10
      
      - name: Run API tests
        run: |
          if [ -f "tests/api/api_test.sh" ]; then
            cd tests/api && ./api_test.sh
          else
            echo "API test script not found, skipping..."
          fi
      
      - name: Check service logs
        if: always()
        run: |
          docker-compose logs
      
      - name: Clean up
        if: always()
        run: |
          docker-compose down
