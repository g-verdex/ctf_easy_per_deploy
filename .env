# DO NOT COMMENT ANY OF these variables, the deploy will fail immediately otherwise
#
# Time settings for containers
LEAVE_TIME=1800            # Default container lifetime in seconds (30 min)
ADD_TIME=600               # Additional time when extending container life (10 min)

# Container image and identification
COMPOSE_PROJECT_NAME=button_clicker # Task name
IMAGES_NAME=localhost/generic_ctf_task:latest  # Docker image name
FLAG="CTF{click_three_times_to_win}"             # Optional. leave as empty string if you want to embbed flag in your task directly, BUT DO NOT COMMENT 

# Port configuration
PORT_IN_CONTAINER=80       # Port the challenge service runs on inside container
START_RANGE=7000           # Start of port range for container mapping
STOP_RANGE=8000           # End of port range for container mapping
FLASK_APP_PORT=2169        # Port where the flask deployer app will be accessible
DIRECT_TEST_PORT=44446     # Port for directly testing the challenge (bypassing deployer)

# Network configuration
NETWORK_NAME=ctf_buttonclicker_network_1744225787_1744225792_1744225827
NETWORK_SUBNET=172.21.4.0/22      # Subnet for the Docker network 

# PostgreSQL Database Configuration
DB_HOST=postgres
DB_PORT=5432
DB_NAME=ctf_deployer
DB_USER=postgres
DB_PASSWORD=secure_password          #Don't be stupid, change this
DB_POOL_MIN=10                       # Minimum connections in the main database pool
DB_POOL_MAX=30                       # Maximum connections in the main database pool

# Challenge details (displayed to users)
CHALLENGE_TITLE="Button Clicker Challenge"
CHALLENGE_DESCRIPTION="This simple challenge requires you to click a button three times to get the flag. Can you do it?"
COMMAND_CONNECT= http://<ip>:<port>/

# Resource limits for user containers
CONTAINER_MEMORY_LIMIT=512M    # Maximum memory per container
CONTAINER_SWAP_LIMIT=512M      # Maximum swap memory per container
CONTAINER_CPU_LIMIT=0.5        # CPU cores allocated per container (0.5 = half a core)
CONTAINER_PIDS_LIMIT=1000      # Maximum process IDs per container

# Security options for user containers
ENABLE_NO_NEW_PRIVILEGES=false  # Whether to prevent privilege escalation
ENABLE_READ_ONLY=false          # Whether to make container filesystem read-only
ENABLE_TMPFS=false              # Whether to enable temporary filesystem
TMPFS_SIZE=64M                # Size of tmpfs if enabled

# Container capability configuration
DROP_ALL_CAPABILITIES=false     # Whether to drop all capabilities by default
CAP_NET_BIND_SERVICE=false      # Allow binding to privileged ports (<1024)  
CAP_CHOWN=false                 # Allow changing file ownership

# Rate limiting to prevent abuse
MAX_CONTAINERS_PER_HOUR=100    # Maximum containers per IP address per hour
RATE_LIMIT_WINDOW=3600          # Rate limit time window in seconds (1 hour)

#Testing/Debugging
DEBUG_MODE=true                #Enable debug for flask_app deployer werkzweug server
BYPASS_CAPTCHA=false           #Skip captcha validation for testing (true/false)


# Additional Configuration (Optional) #

# Thread pool configuration
THREAD_POOL_SIZE=50                # Maximum number of worker threads for the container monitoring pool

# Timing configurations
MAINTENANCE_INTERVAL=300           # Seconds between maintenance runs (default: 5 minutes)
CONTAINER_CHECK_INTERVAL=30        # How often to check if containers have expired (seconds)
CAPTCHA_TTL=300                    # Time-to-live for CAPTCHA entries (seconds)

# Centralized cleanup configuration
MAINTENANCE_BATCH_SIZE=10          # Number of containers to process in each cleanup batch
MAINTENANCE_POOL_MIN=3             # Minimum connections in the dedicated cleanup database pool
MAINTENANCE_POOL_MAX=5             # Maximum connections in the dedicated cleanup database pool

# Resource allocation settings
PORT_ALLOCATION_MAX_ATTEMPTS=5     # Maximum number of attempts to allocate a port before failing
STALE_PORT_MAX_AGE=3600            # Maximum age in seconds before a port allocation is considered stale
                                   # (defaults to RATE_LIMIT_WINDOW if not specified)
                                   # # Add these to the bottom of the existing .env file

# Global resource quotas
MAX_TOTAL_CONTAINERS=1000           # Maximum containers across all users
MAX_TOTAL_CPU_PERCENT=800           # Maximum total CPU (800% = 8 cores fully utilized)
MAX_TOTAL_MEMORY_GB=32              # Maximum total memory in GB
RESOURCE_CHECK_INTERVAL=10          # Seconds between resource checks
RESOURCE_SOFT_LIMIT_PERCENT=80      # Warning threshold (percentage of limits)
ENABLE_RESOURCE_QUOTAS=true         # Enable/disable resource quota checks


# Metrics configuration
METRICS_ENABLED=true                # Enable Prometheus metrics collection
ENABLE_LOGS_ENDPOINT=true                       # Whether to enable the /logs endpoint
# Admin key for detailed resource status (set to a secure random value)
ADMIN_KEY=change_this_to_a_secure_random_value
